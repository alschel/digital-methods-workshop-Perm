EPGS3857 <- "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378137 +b=6378137 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
perm_buildings_osm_year %>%
spTransform(x = ., CRSobj = EPGS3857) -> perm_forMapbox
perm_forMapbox
writeOGR(perm_forMapbox, "data/perm_forMapbox.geojson",
layer = "perm_forMapbox.geojson", driver = "GeoJSON", overwrite_layer = T)
plot(perm_forMapbox)
writeOGR(perm_forMapbox, "data/perm_forMapbox.shp",
layer = "perm_forMapbox.shp", driver = "ESRI Shapefile", overwrite_layer = T)
writeOGR(perm_forMapbox, "data/perm_forMapbox.shp",
layer = "perm_forMapbox.shp", driver = "ESRI Shapefile", overwrite_layer = T, encoding = "UTF-8")
perm_buildings_geocoded
points
polygons
points
str(points)
EPGS3857 <- "+proj=merc +lon_0=0 +k=1 +x_0=0 +y_0=0 +a=6378137 +b=6378137 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
perm_buildings_osm_year %>%
spTransform(x = ., CRSobj = EPGS3857) -> perm_forMapbox
writeOGR(perm_forMapbox, "data/perm_forMapbox.geojson",
layer = "perm_forMapbox.geojson", driver = "GeoJSON", overwrite_layer = T, encoding = "UTF-8")
plot(perm_forMapbox)
writeOGR(perm_forMapbox, "data/perm_forMapbox.tab",
layer = "perm_forMapbox.tab", driver = "MapInfo File", overwrite_layer = T, encoding = "UTF-8")
writeOGR(perm_forMapbox, "data/perm_forMapbox.geojson",
layer = "perm_forMapbox.geojson", driver = "GeoJSON", overwrite_layer = T, encoding = "UTF-8")
EPGS3857 <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
perm_buildings_osm_year %>%
spTransform(x = ., CRSobj = EPGS3857) -> perm_forMapbox
plot(perm_forMapbox)
writeOGR(perm_forMapbox, "data/perm_forMapbox.geojson",
layer = "perm_forMapbox.geojson", driver = "GeoJSON", overwrite_layer = T, encoding = "UTF-8")
rm(EPGS3857)
EPSG3857 <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
perm_buildings_osm_year %>%
spTransform(x = ., CRSobj = EPSG3857) -> perm_forMapbox
library(viridis)
?viridis
viridis(12)
knitr::opts_chunk$set(echo = TRUE)
r <- raster(ncol=10, nrow=10, xmx=-80, xmn=-150, ymn=20, ymx=60) # creates an "empty" RasterLayer object
# sp package создает классы Spatial*
# let’s make some objects of Spatial* class from scratch
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5, -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9, 36.2, 39, 41.6, 36.9)
lonlat <- cbind(longitude, latitude)
pts <- SpatialPoints(lonlat)
str(pts)
# Detailed info abut the object
showDefault(pts)
# We did not set the coordinate reference system. Let's do it
crdref <- CRS('+proj=longlat +datum=WGS84')
pts <- SpatialPoints(coords = lonlat, proj4string = crdref)
str(pts)
pts
# We can use SpatialPoints object to create SpatialPintsDataFrame
df <- data.frame(ID=1:nrow(lonlat), precip=(latitude-30)^3)
# combine SpatialPoints and DataFrame
ptsdf <- SpatialPointsDataFrame(pts, data = df)
str(ptsdf)
# To create SpatialLines and SpatialPlygons we can use spLines() and spPlolygons() (from raster package)
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat <- cbind(lon, lat)
lns <- spLines(lonlat, crs=crdref)
elev <- raster("data/ASTGTM2_N58E056_dem.tif")
library(grid)
library(gridExtra)
library(sp)
library(raster)
library(RColorBrewer)
library(lattice)
library(latticeExtra)
library(rasterVis)
library(leaflet)
library(grid)
library(gridExtra)
# Read raster data
elev <- raster("data/ASTGTM2_N58E056_dem.tif")
# Change margins parameters
par(mar = c(0,0,0,0))
# Plot
l <- levelplot(elev,
margin=FALSE,
colorkey=list(
space='bottom',
labels=list(at=seq(0,350, 50), font=4),
axis.line=list(col='black'),
width=0.75
),
par.settings=list(
strip.border=list(col='transparent'),
strip.background=list(col='transparent'),
axis.line=list(col='transparent')
),
xlab = NULL,
ylab = NULL,
scales=list(draw=FALSE),
col.regions=colorRampPalette(rev(brewer.pal(8, 'RdYlGn'))[1:7]),
alpha.regions = 0.7,
at=seq(0,350, 50),
names.attr="bbb")
m <- leaflet() %>% setView(lng = 58.010374, lat = 56.229398, zoom = 12) %>% addTiles()
gtid.arrange(l, m)
library(sp)
library(raster)
library(RColorBrewer)
library(lattice)
library(latticeExtra)
library(rasterVis)
library(leaflet)
library(grid)
library(gridExtra)
# Read raster data
elev <- raster("data/ASTGTM2_N58E056_dem.tif")
# Change margins parameters
par(mar = c(0,0,0,0))
# Plot
l <- levelplot(elev,
margin=FALSE,
colorkey=list(
space='bottom',
labels=list(at=seq(0,350, 50), font=4),
axis.line=list(col='black'),
width=0.75
),
par.settings=list(
strip.border=list(col='transparent'),
strip.background=list(col='transparent'),
axis.line=list(col='transparent')
),
xlab = NULL,
ylab = NULL,
scales=list(draw=FALSE),
col.regions=colorRampPalette(rev(brewer.pal(8, 'RdYlGn'))[1:7]),
alpha.regions = 0.7,
at=seq(0,350, 50),
names.attr="bbb")
m <- leaflet() %>% setView(lng = 58.010374, lat = 56.229398, zoom = 12) %>% addTiles()
grid.arrange(l, m)
library(sp)
library(raster)
library(RColorBrewer)
library(lattice)
library(latticeExtra)
library(rasterVis)
# library(leaflet)
# library(grid)
# library(gridExtra)
# Read raster data
elev <- raster("data/ASTGTM2_N58E056_dem.tif")
# Change margins parameters
par(mar = c(0,0,0,0))
# Plot
levelplot(elev,
margin=FALSE,
colorkey=list(
space='bottom',
labels=list(at=seq(0,350, 50), font=4),
axis.line=list(col='black'),
width=0.75
),
par.settings=list(
strip.border=list(col='transparent'),
strip.background=list(col='transparent'),
axis.line=list(col='transparent')
),
xlab = NULL,
ylab = NULL,
scales=list(draw=FALSE),
col.regions=colorRampPalette(rev(brewer.pal(8, 'RdYlGn'))[1:7]),
alpha.regions = 0.7,
at=seq(0,350, 50),
names.attr="bbb")
# m <- leaflet() %>% setView(lng = 58.010374, lat = 56.229398, zoom = 12) %>% addTiles()
#
#
# grid.arrange(l, m)
knitr::opts_chunk$set(echo = TRUE)
# Load leaflet map
leaflet() %>% setView(lng = 56.229398, lat = 58.010374, zoom = 14) %>% addTiles()
# Load leaflet map
leaflet() %>% setView(lng = 56.229398, lat = 58.010374, zoom = 12) %>% addTiles()
# Load leaflet map
leaflet() %>% setView(lng = 56.229398, lat = 58.010374, zoom = 11) %>% addTiles()
# Load leaflet map
leaflet() %>% setView(lng = 56.229398, lat = 58.010374, zoom = 10) %>% addTiles()
# Load leaflet map
leaflet() %>% setView(lng = 56.23, lat = 58, zoom = 10) %>% addTiles()
# Load leaflet map
leaflet() %>% setView(lng = 56.33, lat = 58, zoom = 10) %>% addTiles()
# Load leaflet map
leaflet() %>% setView(lng = 56.33, lat = 59, zoom = 10) %>% addTiles()
# Load leaflet map
leaflet() %>% setView(lng = 56.33, lat = 59, zoom = 9) %>% addTiles()
# Load leaflet map
leaflet() %>% setView(lng = 56.33, lat = 58.5, zoom = 9) %>% addTiles()
# Load leaflet map
leaflet() %>% setView(lng = 56.33, lat = 58.3, zoom = 9) %>% addTiles()
library(sp)
library(raster)
library(RColorBrewer)
library(lattice)
library(latticeExtra)
library(rasterVis)
# Read raster data
elev <- raster("data/ASTGTM2_N58E056_dem.tif")
# Plot
levelplot(elev,
margin=FALSE,
colorkey=list(
space='bottom',
labels=list(at=seq(0,350, 50), font=4),
axis.line=list(col='black'),
width=0.75),
par.settings=list(
strip.border=list(col='transparent'),
strip.background=list(col='transparent'),
axis.line=list(col='transparent')),
xlab = NULL,
ylab = NULL,
scales=list(draw=FALSE),
col.regions=colorRampPalette(rev(brewer.pal(8, 'RdYlGn'))[1:7]),
alpha.regions = 0.7,
at=seq(0,350, 50),
names.attr="bbb")
library(leaflet)
# Load leaflet map
leaflet() %>% setView(lng = 56.33, lat = 58.3, zoom = 9) %>% addTiles()
library(sp)
library(raster)
library(RColorBrewer)
library(lattice)
library(latticeExtra)
library(rasterVis)
library(grid)
library(gridExtra)
# Read raster data
elev <- raster("data/ASTGTM2_N58E056_dem.tif")
# Plot
el <- levelplot(elev,
margin=FALSE,
colorkey=list(
space='bottom',
labels=list(at=seq(0,350, 50), font=4),
axis.line=list(col='black'),
width=0.75),
par.settings=list(
strip.border=list(col='transparent'),
strip.background=list(col='transparent'),
axis.line=list(col='transparent')),
xlab = NULL,
ylab = NULL,
scales=list(draw=FALSE),
col.regions=colorRampPalette(rev(brewer.pal(8, 'RdYlGn'))[1:7]),
alpha.regions = 0.7,
at=seq(0,350, 50),
names.attr="bbb")
library(leaflet)
# Load leaflet map
m <- leaflet() %>% setView(lng = 56.33, lat = 58.3, zoom = 9) %>% addTiles()
grid.arrange(grob(el), grob(m))
library(sp)
library(raster)
library(RColorBrewer)
library(lattice)
library(latticeExtra)
library(rasterVis)
# Read raster data
elev <- raster("data/ASTGTM2_N58E056_dem.tif")
# Plot
levelplot(elev,
margin=FALSE,
colorkey=list(
space='bottom',
labels=list(at=seq(0,350, 50), font=4),
axis.line=list(col='black'),
width=0.75),
par.settings=list(
strip.border=list(col='transparent'),
strip.background=list(col='transparent'),
axis.line=list(col='transparent')),
xlab = NULL,
ylab = NULL,
scales=list(draw=FALSE),
col.regions=colorRampPalette(rev(brewer.pal(8, 'RdYlGn'))[1:7]),
alpha.regions = 0.7,
at=seq(0,350, 50),
names.attr="bbb")
library(sp)
library(raster)
library(RColorBrewer)
library(lattice)
library(latticeExtra)
library(rasterVis)
# Read raster data
elev <- raster("data/ASTGTM2_N58E056_dem.tif")
# Plot
levelplot(elev,
margin=FALSE,
colorkey=list(
space='bottom',
labels=list(at=seq(0,350, 50), font=4),
axis.line=list(col='black'),
width=0.75),
par.settings=list(
strip.border=list(col='transparent'),
strip.background=list(col='transparent'),
axis.line=list(col='transparent')),
xlab = NULL,
ylab = NULL,
scales=list(draw=FALSE),
col.regions=colorRampPalette(rev(brewer.pal(8, 'RdYlGn'))[1:7]),
alpha.regions = 0.7,
at=seq(0,350, 50),
names.attr="bbb")
plot(pols,
axes = T)
# Let’s make some objects of Spatial* class from scratch
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5, -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9, 36.2, 39, 41.6, 36.9)
lonlat <- cbind(longitude, latitude)
pts <- SpatialPoints(lonlat)
# Set the coordinate reference system
crdref <- CRS('+proj=longlat +datum=WGS84')
pts <- SpatialPoints(coords = lonlat, proj4string = crdref)
# To create SpatialLines and SpatialPlygons we can use spLines() and spPlolygons() from raster package
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat <- cbind(lon, lat)
lns <- spLines(lonlat, crs=crdref)
pols <- spPolygons(lonlat, crs=crdref)
# Create maps
plot(pols,
axes = T) # создает рамку с сеткой координат
plot(pols, border = "blue", col = "yellow", add = T)
points(pts, # SpatialPoints
pch = 20, # тип значка - точка
col = "red", cex = 2)
# Let’s make some objects of Spatial* class from scratch
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5, -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9, 36.2, 39, 41.6, 36.9)
lonlat <- cbind(longitude, latitude)
pts <- SpatialPoints(lonlat)
# Set the coordinate reference system
crdref <- CRS('+proj=longlat +datum=WGS84')
pts <- SpatialPoints(coords = lonlat, proj4string = crdref)
# To create SpatialLines and SpatialPlygons we can use spLines() and spPlolygons() from raster package
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat <- cbind(lon, lat)
lns <- spLines(lonlat, crs=crdref)
pols <- spPolygons(lonlat, crs=crdref)
# Create maps
plot(pols,
axes = T) # создает рамку с сеткой координат
# plot(pols, border = "blue", col = "yellow", add = T)
# points(pts, # SpatialPoints
# pch = 20, # тип значка - точка
# col = "red", cex = 2)
# Let’s make some objects of Spatial* class from scratch
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5, -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9, 36.2, 39, 41.6, 36.9)
lonlat <- cbind(longitude, latitude)
pts <- SpatialPoints(lonlat)
# Set the coordinate reference system
crdref <- CRS('+proj=longlat +datum=WGS84')
pts <- SpatialPoints(coords = lonlat, proj4string = crdref)
# To create SpatialLines and SpatialPlygons we can use spLines() and spPlolygons() from raster package
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat <- cbind(lon, lat)
lns <- spLines(lonlat, crs=crdref)
pols <- spPolygons(lonlat, crs=crdref)
# Create maps
plot(lns,
axes = T) # создает рамку с сеткой координат
# plot(pols, border = "blue", col = "yellow", add = T)
# points(pts, # SpatialPoints
# pch = 20, # тип значка - точка
# col = "red", cex = 2)
# Let’s make some objects of Spatial* class from scratch
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5, -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9, 36.2, 39, 41.6, 36.9)
lonlat <- cbind(longitude, latitude)
pts <- SpatialPoints(lonlat)
# Set the coordinate reference system
crdref <- CRS('+proj=longlat +datum=WGS84')
pts <- SpatialPoints(coords = lonlat, proj4string = crdref)
# To create SpatialLines and SpatialPlygons we can use spLines() and spPlolygons() from raster package
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
lonlat <- cbind(lon, lat)
lns <- spLines(lonlat, crs=crdref)
pols <- spPolygons(lonlat, crs=crdref)
# Create maps
# plot(lns,
#      axes = T) # создает рамку с сеткой координат
plot(pols, border = "blue", col = "yellow", axes = T)
points(pts, # SpatialPoints
pch = 20, # тип значка - точка
col = "red", cex = 2)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(readr)
library(rvest)
library(stringr)
library(ggplot2)
heritage <- read_csv("data/heritage.csv")
head(heritage)
# Read the data
heritage_geocoded <- read_csv("data/heritage_geocoded.csv")
View(heritage_geocoded)
heritage_geocoded <- read_csv("data/heritage_geocoded.csv")
head(heritage_geocoded)
install.package(dplyr, tidyr)
install.packages(dplyr, tidyr)
install.packages(c(dplyr, tidyr))
# first install missing packages
# thanks to Pratik Patil for the package installation code ( http://stackoverflow.com/a/29622385 )
# Specify the list of required packages to be installed and load
Required_Packages <- c("dplyr", "tidyr", "readr",
"rvest",
"stringr",
"ggplot2",
"sp", "raster",
"RColorBrewer", "lattice", "latticeExtra", "rasterVis",
)
# first install missing packages
# thanks to Pratik Patil for the package installation code ( http://stackoverflow.com/a/29622385 )
# Specify the list of required packages to be installed and load
Required_Packages <- c("dplyr", "tidyr", "readr",
"rvest",
"stringr",
"ggplot2",
"sp", "raster",
"RColorBrewer", "lattice", "latticeExtra", "rasterVis"
)
Install_And_Load <- function(Required_Packages) {
Remaining_Packages <- Required_Packages[!(Required_Packages %in% installed.packages()[,"Package"])]
if(length(Remaining_Packages))
{
install.packages(Remaining_Packages, repos = "https://cran.rstudio.com", type = "binary")
}
for(package_name in Required_Packages)
{
library(package_name, character.only = T, quietly = F)
}
}
Install_And_Load(Required_Packages) # Call the function to install packages
heritage_geocoded <- read_csv("data/heritage_geocoded.csv")
head(heritage_geocoded)
library(sp)
library(rgdal)
library(rvest)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(RColorBrewer)
library(readr)
page
page
print(page)
str(page)
page$doc
page$node
page <- read_html("www.vk.com")
page <- read_html("https://www.vk.com")
# Save as html page
page <- read_html(url)
page
print(page)
rm(perm_forMapbox)
View(res)
knitr::opts_chunk$set(echo = TRUE)
head(res)
res %>% ggplot(aes(year))+
geom_histogram(aes(), binwidth = 2)+
labs(y = "Number of buildings", x = "Year")+
scale_x_continuous(breaks = seq(1850, 2017, 10))
res %>% ggplot(aes(year))+
geom_histogram(binwidth = 2)+
labs(y = "Number of buildings", x = "Year")+
scale_x_continuous(breaks = seq(1850, 2017, 10))
# save as csv file
write_csv(res, "data/res.csv")
perm_buildings_geocoded <- read_csv("data/perm_buildings_geocoded.csv")
head(perm_buildings_geocoded)
perm_buildings_geocoded <- read_csv("data/perm_buildings_geocoded.csv")
str(perm_buildings_geocoded)
head(perm_buildings_geocoded)
perm_buildings_geocoded <- read_csv("data/perm_buildings_geocoded.csv")
nrow(perm_buildings_geocoded)
head(perm_buildings_geocoded)
knitr::opts_chunk$set(echo = TRUE)
plot(polygons)
plot(points, add = T)
plot(points, add = T, pch = 20)
plot(points, add = T, pch = 20)
plot(points, pch = 20)
?over
points_data
points_data %>% nrow()
polygons
points
polygons
points_data %>% nrow()
perm_buildings_osm_year
source('~/.active-rstudio-document', echo=TRUE)
knit_with_parameters('~/Desktop/ConfSchoolsSeminars/Perm2018SpringSchool/digital-methods-workshop_Perm/title.Rmd')
